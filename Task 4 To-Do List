/*CODSOFT C++ internship Task 4 TO-DO List*/

#include <iostream>
#include <vector>
#include <string>
using namespace std;
struct Task {
    string description;
    bool completed;
};
void AddTask(vector<Task>& taskList, const string& description) {
    Task newTask;
    newTask.description = description;
    newTask.completed = false;
    taskList.push_back(newTask);
    system("cls");
    cout << "Task added: " << description <<endl;
}
void ViewTasks(const vector<Task>& taskList) {
    system("cls");
   cout << "Task List:" << endl;
    for (size_t i = 0; i < taskList.size(); ++i) {
        const Task& task = taskList[i];
        cout << "[" << (task.completed ? "X" : " ") << "] " << i + 1 << ". " << task.description <<endl;
    }
}
void MarkTaskCompleted(vector<Task>& taskList, size_t taskIndex) {
    system("cls");
    if (taskIndex >= 1 && taskIndex <= taskList.size()) {
        taskList[taskIndex - 1].completed = true;
        std::cout << "Task marked as completed: " << taskList[taskIndex - 1].description << endl;
    }
    else {
        std::cout << "Invalid task number." << endl;
    }
}
void RemoveTask(vector<Task>& taskList, size_t taskIndex) 
{
    system("cls");
    if (taskIndex >= 1 && taskIndex <= taskList.size()) {
        cout << "Task removed: " << taskList[taskIndex - 1].description << endl;
        taskList.erase(taskList.begin() + taskIndex - 1);
    }
    else {
        cout << "Invalid task number." << endl;
    }
}

int main() 
{
   
   vector<Task> taskList;

    while (true) {
       cout << "Options:" << endl;
        cout << "1. Add Task" << endl;
        cout << "2. View Tasks" <<endl;
        cout << "3. Mark Task as Completed" <<endl;
       cout << "4. Remove Task" <<endl;
        cout << "5. Exit" <<endl;

        int choice;
        cout << "Enter your choice: ";
       cin >> choice;

        if (choice == 1) {
            string taskDescription;
           cout << "Enter task description: ";
           cin.ignore(); 
            getline(cin, taskDescription);
            AddTask(taskList, taskDescription);
        }
        else if (choice == 2) {
            ViewTasks(taskList);
        }
        else if (choice == 3) {
            size_t taskIndex;
            cout << "Enter task number to mark as completed: ";
            cin >> taskIndex;
            MarkTaskCompleted(taskList, taskIndex);
        }
        else if (choice == 4) {
            size_t taskIndex;
            cout << "Enter task number to remove: ";
            cin >> taskIndex;
            RemoveTask(taskList, taskIndex);
        }
        else if (choice == 5) {
            break;
        }
        else {
            cout << "Invalid choice. Please try again." <<endl;
        }
    }

    return 0;
}
